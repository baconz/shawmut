#!/usr/bin/env python

import socket
import time
from datetime import datetime
import os.path
import urllib2
import json

SCHEDULER_INTERVAL = 5
CONNECTION_TIMEOUT = 10
ADDRESSES = [ '192.168.13.9', '192.168.13.6' ]

# TODO only turn on lights on night time

def log(msg):
    print "%s: %s" % (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), msg)

def check_if_home():
    for ip in ADDRESSES:
        try:
            conn = socket.create_connection((ip, 62078), CONNECTION_TIMEOUT)
            return True
        except socket.timeout:
            log("Timed out: %s is not connected to our network" % ip)
    return False

def have_guests():
    os.path.isfile('/etc/shawmut/have_guests')

def light_data():
    try:
        data = urllib2.urlopen('http://localhost:5000/api/environment').read()
        return json.loads(data)
    except Exception as e:
        log("Rescuing exception %s %s" %(e, e.message))
        return {}

def off_lights():
    return list(name for (name, data) in light_data().iteritems() if data['state'] == 0)

def on_lights():
    return list(name for (name, data) in light_data().iteritems() if data['state'] == 1)

def toggle_lights(lights):
    # Race condition if someone turns on lights manually between finding off/on lights and toggling/
    for l in lights:
        try:
            urllib2.urlopen("http://localhost:5000/api/device/%s" %l, '{"state":"toggle"}')
        except Exception as e:
            log("Rescuing exception %s %s" %(e, e.message))


def turn_on_lights():
    found_off_lights = off_lights()
    if found_off_lights:
        log("Turning on lights: %s" %(',').join(found_off_lights))
        toggle_lights(found_off_lights)

def turn_off_lights():
    found_on_lights = on_lights()
    if found_on_lights:
        log("Turning off lights: %s" %(',').join(found_on_lights))
        toggle_lights(found_on_lights)

def main(away_flag):
    log("Starting. Away_flag set to %s" % away_flag)
    is_home = check_if_home()
    if have_guests():
        return away_flag
    elif is_home and away_flag:
        log('Home james: Turning on any off lights and setting away_flag to False')
        turn_on_lights()
        away_flag = False
    elif not is_home and not away_flag:
        log('Gonzo: Turning off any on lights and setting away_flag to True')
        turn_off_lights()
        away_flag = True
    else:
        log('No changes, doing nothing')
    return away_flag


if __name__ == '__main__':

    away_flag = False
    while True:
        time.sleep(SCHEDULER_INTERVAL)
        away_flag = main(away_flag)
